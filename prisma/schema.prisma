generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUMS

enum userLevel {
  STANDARD
  ADMIN
  TRIAL
  FREE
  PREMIUM
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

// Enums for roadmap and question statuses
enum RoadmapStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  CREATING
}

// MODELS

model Waitlist {
  uid       String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users {
  uid       String  @id @default(cuid())
  email     String  @unique
  username  String?
  firstName String?
  lastName  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  userLevel userLevel @default(STANDARD)

  answers Answers[]

  totalDailyStreak   Int? @default(0)
  correctDailyStreak Int? @default(0)

  userProfilePicture String?

  showTimeTaken Boolean @default(false)

  subscription Subscriptions?

  streak Streaks?

  roadmaps UserRoadmaps[]

  workspaceOwner Workspaces[] @relation(name: "WorkspaceOwner")

  workspaceUsers Workspaces[] @relation(name: "WorkspaceUsers")

  WorkspaceUsers WorkspaceUsers[]
}

model Workspaces {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  ownerUid    String
  owner       Users   @relation(fields: [ownerUid], references: [uid], onDelete: Cascade, onUpdate: Cascade, name: "WorkspaceOwner")

  users WorkspaceUsers[]

  @@unique([name, ownerUid])
  Users Users[] @relation(name: "WorkspaceUsers")
}

model WorkspaceUsers {
  uid         String     @id @default(cuid())
  workspaceUid String
  workspace   Workspaces @relation(fields: [workspaceUid], references: [uid], onDelete: Cascade)
  userUid     String
  user        Users      @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  role        UserRole   @default(MEMBER)

  @@unique([workspaceUid, userUid])
}

enum UserRole {
  ADMIN
  MEMBER
  VIEWER
}

model Subscriptions {
  uid           String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userUid       String    @unique
  user          Users     @relation(fields: [userUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  startDate     DateTime?
  endDate       DateTime?
  active        Boolean   @default(true)
  planId        String
  productId     String
  planTrial     Boolean   @default(false)
  planTrialDays Int?

  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionItemId String?
}

model Questions {
  uid          String   @id @default(cuid())
  question     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  questionDate String

  answers       QuestionAnswers[]
  correctAnswer String

  userAnswers    Answers[]
  answerResource String?

  codeSnippet String?

  hint String?

  dailyQuestion Boolean @default(false)

  tags QuestionTags[]

  difficulty QuestionDifficulty @default(EASY)

  DemoAnswers DemoAnswers[]
}

model Tag {
  uid       String         @id @default(uuid())
  name      String         @unique
  questions QuestionTags[]
}

// Junction table for the many-to-many relationship between Questions and Tags
model QuestionTags {
  question   Questions @relation(fields: [questionId], references: [uid], onDelete: Cascade)
  questionId String
  tag        Tag       @relation(fields: [tagId], references: [uid], onDelete: Cascade)
  tagId      String

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}

model QuestionAnswers {
  uid         String    @id @default(cuid())
  questionUid String
  question    Questions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  answer      String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Answers {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userUid       String    @default("legacy_user")
  questionUid   String    @default("legacy_question")
  user          Users     @relation(fields: [userUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  question      Questions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  userAnswerUid String
  correctAnswer Boolean   @default(false)
  questionDate  String    @default("")
  timeTaken     Int?
}

model DemoAnswers {
  uid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  questionUid String
  question    Questions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  correctAnswer Boolean @default(false)
  userAnswer   String
  timeTaken    Int?
}

model Streaks {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // connect to user
  userUid String @unique
  user    Users  @relation(fields: [userUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  // how we calculate the user's streak
  streakStart DateTime?
  streakEnd   DateTime?

  // easy way to pluck out the user's current streak
  currentstreakCount Int @default(0)

  // easy way to pluck out the user's longest streak
  longestStreak Int @default(0)
}

// Main roadmap associated with a user
model UserRoadmaps {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Connect to the user
  userUid String
  user    Users  @relation(fields: [userUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  // Related questions specific to this roadmap
  questions RoadmapUserQuestions[]

  // Status of the roadmap (e.g., active, completed, archived)
  status                              RoadmapStatus                         @default(ACTIVE)
  DefaultRoadmapQuestionsUsersAnswers DefaultRoadmapQuestionsUsersAnswers[]

  currentQuestionIndex Int @default(1) // used to instantly jump to the user's current question when onboarding

  hasGeneratedRoadmap Boolean @default(false) // flag to indicate if the roadmap has been generated

  title       String? @default("Untitled Roadmap")
  description String? @default("No description provided")
}

// Individual questions in a user's roadmap
model RoadmapUserQuestions {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question    String
  codeSnippet String? // Optional code snippet for the question
  hint        String? // Optional hint to help the user
  difficulty  QuestionDifficulty @default(EASY) // Enum for question difficulty

  // Track completion status for this question
  completed   Boolean   @default(false)
  completedAt DateTime? // Timestamp for when the question was completed

  // Connect to the associated roadmap
  roadmapUid String
  roadmap    UserRoadmaps @relation(fields: [roadmapUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  // connect to a single RoadmapUserQuestionsAnswers
  correctAnswerUid String

  answers RoadmapUserQuestionsAnswers[]

  userAnswers RoadmapUserQuestionsUserAnswers[]

  userCorrect Boolean @default(false)

  // the order of the question in the roadmap
  order Int
}

model RoadmapUserQuestionsAnswers {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Connect to the associated roadmap question
  questionUid String
  question    RoadmapUserQuestions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  // is this the correct answer?
  correct Boolean @default(false)

  // the string answer 
  answer String
}

model RoadmapUserQuestionsUserAnswers {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Connect to the associated roadmap question
  questionUid String
  question    RoadmapUserQuestions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  correct Boolean @default(false)

  // User-provided answer
  answer String
}

// Default questions used to generate user roadmaps
model DefaultRoadmapQuestions {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question    String
  codeSnippet String? // Optional code snippet for the default question
  hint        String? // Optional hint for the question
  difficulty  QuestionDifficulty @default(EASY) // Enum for question difficulty

  // Answers submitted for the default roadmap questions
  answers                             DefaultRoadmapQuestionsAnswers[]
  DefaultRoadmapQuestionsUsersAnswers DefaultRoadmapQuestionsUsersAnswers[]

  correctAnswer String
  order         Int    @default(autoincrement())

  aiTitle String? // This is for the case where question titles are 'what is the output of this code' and we need to give the actual title of the question to the ai
}

// User answers to the default roadmap questions
model DefaultRoadmapQuestionsAnswers {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Connect to the associated default question
  questionUid String
  question    DefaultRoadmapQuestions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  // User-provided answer
  answer String
}

model DefaultRoadmapQuestionsUsersAnswers {
  uid       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Connect to the associated default question
  questionUid String
  question    DefaultRoadmapQuestions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  // User-provided answer
  answer  String
  correct Boolean @default(false)

  // connect to the roadmap
  roadmapUid String
  roadmap    UserRoadmaps @relation(fields: [roadmapUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
}
