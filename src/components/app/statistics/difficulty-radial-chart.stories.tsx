import type { Meta, StoryObj } from '@storybook/react';
import { StatsChartData } from '@/types/Stats';
import DifficultyRadialChart from './difficulty-radial-chart';

const meta = {
  component: DifficultyRadialChart,
  parameters: {
    layout: 'fullscreen',
    backgrounds: {
      default: 'dark',
      values: [{ name: 'dark', value: '#090909' }],
    },
  },
  decorators: [
    (Story) => (
      <div
        style={{
          width: '800px',
          height: '500px',
          margin: '2rem auto',
          padding: '1rem',
          background: '#111',
          borderRadius: '8px',
        }}
      >
        <Story />
      </div>
    ),
  ],
  tags: ['autodocs'],
} satisfies Meta<typeof DifficultyRadialChart>;

export default meta;

type Story = StoryObj<typeof meta>;

// Mock data that matches the expected StatsChartData structure
const mockData: StatsChartData = {
  all: {
    totalQuestions: 175,
    tagCounts: {
      javascript: 52,
      'data-types': 1,
      'equality-comparison': 1,
      objects: 17,
      nested: 2,
      React: 1,
      useState: 3,
      'state-management': 3,
      nullish: 1,
      fundamentals: 2,
      iteration: 2,
      arrays: 27,
      sorting: 1,
      'comparator functions': 1,
      Arrays: 1,
      Methods: 1,
      push: 2,
      'Array-Manipulation': 1,
      'control-flow': 2,
      switch: 1,
      validation: 4,
      'error-handling': 2,
      properties: 3,
      reduce: 14,
      Strings: 3,
      'Regular Expressions': 1,
      DOM: 1,
      events: 2,
      recursion: 1,
      'array-methods': 7,
      'Array-manipulation': 1,
      strings: 10,
      some: 1,
      'Frequency-Counting': 2,
      Optimization: 1,
      'Data-Structures': 1,
      'Hash-Maps': 1,
      regex: 3,
      filter: 6,
      JavaScript: 7,
      calculation: 1,
      discount: 1,
      map: 6,
      search: 1,
      'data-structures': 1,
      functions: 4,
      arithmetic: 1,
      Functions: 1,
      'Error Handling': 1,
      'Async Programming': 1,
      filtering: 1,
      react: 6,
      'react-hooks': 4,
      closures: 3,
      setState: 1,
      async: 2,
      'data-aggregation': 1,
      variables: 3,
      types: 1,
      split: 1,
      Set: 1,
      unique: 1,
      concatenation: 2,
      math: 2,
      transformation: 1,
      caching: 1,
      timers: 1,
      'garbage-collection': 1,
      setTimeout: 2,
      useMemo: 1,
      useCallback: 1,
      optimization: 1,
      memoization: 1,
      'react-performance': 1,
      const: 1,
      immutability: 1,
      authentication: 2,
      timing: 1,
      every: 1,
      'boolean-logic': 1,
      'async-programming': 3,
      queues: 1,
      batching: 3,
      promises: 3,
      'type-checking': 2,
      loops: 6,
      'while-loop': 1,
      increment: 1,
      aggregation: 1,
      accumulator: 1,
      'real-world-applications': 1,
      accumulators: 1,
      'object-references': 1,
      maps: 1,
      mutability: 1,
      proxy: 1,
      reflection: 1,
      'reactive-programming': 1,
      'state-updates': 1,
      generators: 1,
      iterators: 1,
      'memory-optimization': 1,
      'react-suspense': 1,
      'promise-management': 1,
      'data-fetching': 1,
      'async programming': 1,
      'error handling': 1,
      fetch: 1,
      Algorithms: 1,
      'Data Transformation': 1,
      'object-iteration': 2,
      'object manipulation': 1,
      'data-processing': 1,
      'string-manipulation': 1,
      scope: 1,
      'class-components': 1,
      localStorage: 1,
      JSON: 1,
      classes: 1,
      'browser-storage': 1,
      conditions: 1,
      'if-statements': 2,
      security: 1,
      cybersecurity: 1,
      'if-else': 1,
      comparison: 1,
      logic: 1,
      methods: 1,
      length: 1,
      'numeric-values': 1,
      http: 1,
      'http-codes': 1,
      'status-codes': 1,
    },
    tags: [
      'javascript',
      'data-types',
      'equality-comparison',
      'objects',
      'nested',
      'React',
      'useState',
      'state-management',
      'nullish',
      'fundamentals',
      'iteration',
      'arrays',
      'sorting',
      'comparator functions',
      'Arrays',
      'Methods',
      'push',
      'Array-Manipulation',
      'control-flow',
      'switch',
      'validation',
      'error-handling',
      'properties',
      'reduce',
      'Strings',
      'Regular Expressions',
      'DOM',
      'events',
      'recursion',
      'array-methods',
      'Array-manipulation',
      'strings',
      'some',
      'Frequency-Counting',
      'Optimization',
      'Data-Structures',
      'Hash-Maps',
      'regex',
      'filter',
      'JavaScript',
      'calculation',
      'discount',
      'map',
      'search',
      'data-structures',
      'functions',
      'arithmetic',
      'Functions',
      'Error Handling',
      'Async Programming',
      'filtering',
      'react',
      'react-hooks',
      'closures',
      'setState',
      'async',
      'data-aggregation',
      'variables',
      'types',
      'split',
      'Set',
      'unique',
      'concatenation',
      'math',
      'transformation',
      'caching',
      'timers',
      'garbage-collection',
      'setTimeout',
      'useMemo',
      'useCallback',
      'optimization',
      'memoization',
      'react-performance',
      'const',
      'immutability',
      'authentication',
      'timing',
      'every',
      'boolean-logic',
      'async-programming',
      'queues',
      'batching',
      'promises',
      'type-checking',
      'loops',
      'while-loop',
      'increment',
      'aggregation',
      'accumulator',
      'real-world-applications',
      'accumulators',
      'object-references',
      'maps',
      'mutability',
      'proxy',
      'reflection',
      'reactive-programming',
      'state-updates',
      'generators',
      'iterators',
      'memory-optimization',
      'react-suspense',
      'promise-management',
      'data-fetching',
      'async programming',
      'error handling',
      'fetch',
      'Algorithms',
      'Data Transformation',
      'object-iteration',
      'object manipulation',
      'data-processing',
      'string-manipulation',
      'scope',
      'class-components',
      'localStorage',
      'JSON',
      'classes',
      'browser-storage',
      'conditions',
      'if-statements',
      'security',
      'cybersecurity',
      'if-else',
      'comparison',
      'logic',
      'methods',
      'length',
      'numeric-values',
      'http',
      'http-codes',
      'status-codes',
    ],
    difficulties: { BEGINNER: 101, EASY: 34, MEDIUM: 31, HARD: 9 },
  },
};

// Mock data with multiple time periods
const mockTimePeriodsData: StatsChartData = {
  '2023-01,2023': {
    totalQuestions: 35,
    tagCounts: {},
    tags: [],
    difficulties: {
      BEGINNER: 20,
      EASY: 10,
      MEDIUM: 5,
      HARD: 0,
    },
  },
  '2023-02,2023': {
    totalQuestions: 47,
    tagCounts: {},
    tags: [],
    difficulties: {
      BEGINNER: 22,
      EASY: 15,
      MEDIUM: 7,
      HARD: 3,
    },
  },
  '2023-03,2023': {
    totalQuestions: 93,
    tagCounts: {},
    tags: [],
    difficulties: {
      BEGINNER: 59,
      EASY: 9,
      MEDIUM: 19,
      HARD: 6,
    },
  },
};

export const Default: Story = {
  args: {
    questionData: mockData,
  },
  decorators: [
    (Story) => (
      <div
        style={{
          margin: '0 auto',
          maxWidth: '900px',
          background: '#111',
          padding: '2rem',
          borderRadius: '12px',
        }}
      >
        <h2
          style={{ color: 'white', marginBottom: '1rem', fontSize: '1.5rem', fontWeight: 'bold' }}
        >
          Question Difficulty Distribution
        </h2>
        <Story />
      </div>
    ),
  ],
};

export const WithMultipleTimePeriods: Story = {
  args: {
    questionData: mockTimePeriodsData,
  },
  decorators: [
    (Story) => (
      <div
        style={{
          margin: '0 auto',
          maxWidth: '900px',
          background: '#111',
          padding: '2rem',
          borderRadius: '12px',
        }}
      >
        <h2
          style={{ color: 'white', marginBottom: '1rem', fontSize: '1.5rem', fontWeight: 'bold' }}
        >
          Question Difficulty by Time Periods
        </h2>
        <Story />
      </div>
    ),
  ],
};
